datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SUPER_ADMIN     // Highest privilege tier with unrestricted access
  ADMIN           // Advanced management tier with broad access
  STANDARD_USER   // Basic platform user (default for parents and athletes)
  PARTNER_USER    // Enhanced access for professionals (coaches, trainers)
  EXTERNAL_USER   // Restricted access for scouts and recruiters
  READ_ONLY      // Non-interactive access for observers
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Authentication fields
  emailVerified    DateTime?  @map("email_verified")
  verificationCode String?    @map("verification_code")
  resetToken       String?    @map("reset_token")
  resetTokenExpiry DateTime?  @map("reset_token_expiry")
  lastLogin        DateTime?  @map("last_login")
  active           Boolean    @default(true)
  
  // Profile Relations
  athlete      Athlete?
  parent       Parent?
  coach        Coach?
  collegeScout CollegeScout?

  // Relationships
  relationshipsInitiated UserRelationship[] @relation("UserRelationshipInitiator")
  relationshipsReceived  UserRelationship[] @relation("UserRelationshipReceiver")

  // Training Relations
  athleteTrainers AthleteTrainer[] @relation("AthleteTraining")
  trainerAthletes AthleteTrainer[] @relation("TrainerAthletes")

  // Recruitment Relations
  athleteRecruitment RecruitmentStatus[] @relation("AthleteRecruitment")
  scoutRecruitment   RecruitmentStatus[] @relation("ScoutRecruitment")

  // Message Relations
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")

  // Permission Relations
  permissions PermissionSet[]
  
  // Impersonation Relations
  impersonatorSessions ImpersonationSession[] @relation("Impersonator")
  targetSessions       ImpersonationSession[] @relation("ImpersonationTarget")

  // Auth Sessions
  authSessions AuthSession[]

  @@map("users")
}

model UserRelationship {
  id               String @id @default(cuid())
  initiator        User   @relation("UserRelationshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId      String
  receiver         User   @relation("UserRelationshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId       String
  relationshipType String

  @@unique([initiatorId, receiverId, relationshipType])
  @@map("user_relationships")
}

model Athlete {
  userId         String   @id
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId       String
  parent         Parent   @relation(fields: [parentId], references: [userId], onDelete: Restrict)
  dateOfBirth    DateTime @map("date_of_birth")
  academicStatus String?  @map("academic_status")
  sport          String?
  graduationYear Int?     @map("graduation_year")
  
  // High School Information
  highSchool     String?  @map("high_school")
  city           String?
  state          String?
  
  // Physical Attributes
  position       String?
  weight         Float?   // in pounds
  height         Float?   // in inches
  sex            String?

  trainers        AthleteTrainer[]
  recruitment     RecruitmentStatus[]
  academicRecords AcademicRecord[]
  athleticStats   AthleticStats[]

  @@map("athletes")
}

model Parent {
  userId           String    @id
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  athletes         Athlete[]
  billingEmail     String?   @map("billing_email")
  billingAddress   String?   @map("billing_address")
  subscriptionTier String    @default("free") @map("subscription_tier")
  subscriptionEnd  DateTime? @map("subscription_end")
  paymentMethod    String?   @map("payment_method")
  lastBillingDate  DateTime? @map("last_billing_date")
  
  // Stripe Integration Fields
  stripeCustomerId String?   @map("stripe_customer_id")
  lastFourDigits  String?   @map("last_four_digits")
  
  // Payment Tracking
  totalPaymentsMade Int      @default(0) @map("total_payments_made")
  remainingPayments Int?     @map("remaining_payments")
  installmentAmount Float?   @map("installment_amount")
  nextPaymentDue   DateTime? @map("next_payment_due")
  paymentPlan      String?   @map("payment_plan") // monthly, quarterly, etc.

  @@map("parents")
}

model Coach {
  userId String  @id
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  school String
  team   String?
  sport  String

  @@map("coaches")
}

model CollegeScout {
  userId      String  @id
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  collegeName String  @map("college_name")
  division    String?
  sport       String

  recruitment RecruitmentStatus[]
  programs    CollegeProgram[]

  @@map("college_scouts")
}

model AthleteTrainer {
  athlete       User     @relation("AthleteTraining", fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId     String
  trainer       User     @relation("TrainerAthletes", fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId     String
  Athlete       Athlete? @relation(fields: [athleteUserId], references: [userId])
  athleteUserId String?

  @@id([athleteId, trainerId])
  @@map("athlete_trainers")
}

model RecruitmentStatus {
  athlete            User          @relation("AthleteRecruitment", fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId          String
  scout              User          @relation("ScoutRecruitment", fields: [scoutId], references: [id], onDelete: Cascade)
  scoutId            String
  interestLevel      String?       @map("interest_level")
  lastContact        DateTime?     @map("last_contact")
  Athlete            Athlete?      @relation(fields: [athleteUserId], references: [userId])
  athleteUserId      String?
  CollegeScout       CollegeScout? @relation(fields: [collegeScoutUserId], references: [userId])
  collegeScoutUserId String?

  @@id([athleteId, scoutId])
  @@map("athlete_recruitment")
}

model AcademicRecord {
  id         String   @id @default(cuid())
  athleteId  String
  athlete    Athlete  @relation(fields: [athleteId], references: [userId], onDelete: Cascade)
  gpa        Float?
  satScore   Int?
  actScore   Int?
  transcript String? // URL to stored transcript
  semester   String
  schoolYear Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("academic_records")
}

model AthleticStats {
  id        String   @id @default(cuid())
  athleteId String
  athlete   Athlete  @relation(fields: [athleteId], references: [userId], onDelete: Cascade)
  sport     String
  statType  String // e.g., "40yd_dash", "vertical_jump", "bench_press"
  value     Float
  unit      String // e.g., "seconds", "inches", "pounds"
  date      DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("athletic_stats")
}

model CollegeProgram {
  id                    String       @id @default(cuid())
  name                  String
  division              String
  conference            String?
  location              String
  sports                String[]     // Array of sports offered
  recruitmentQuestionnaires Json?    @map("recruitment_questionnaires") // JSON object mapping sports to questionnaire URLs
  scoutId               String
  scout                 CollegeScout @relation(fields: [scoutId], references: [userId], onDelete: Cascade)
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  
  // Institutional Information
  image                 String?      // URL to college image
  institutionType       String       @default("public") @map("institution_type") // public or private
  acceptanceRate        Float?       @map("acceptance_rate") // percentage
  averageGPA           Float?       @map("average_gpa")
  totalCost            Int?         @map("total_cost") // annual cost in USD
  totalUndergrads      Int?         @map("total_undergrads")
  rankingBadge         String?      @map("ranking_badge") // e.g., "#1 College for Business"

  @@map("college_programs")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

enum PermissionLevel {
  NONE            // No access to the resource
  READ            // Can view but not modify
  WRITE           // Can view and modify
  MANAGE          // Can view, modify, and manage others' access
  FULL            // Unrestricted access including system changes
}

enum ResourceType {
  SYSTEM_ARCHITECTURE    // Core system structure and configuration
  USER_MANAGEMENT       // User accounts and access control
  FINANCIAL_DATA        // Payment and billing information
  ATHLETE_PROFILE       // Athlete personal and sports information
  ACADEMIC_RECORDS      // Educational and academic data
  ATHLETIC_STATS        // Performance metrics and statistics
  RECRUITMENT_STATUS    // Recruitment process and status
  COLLEGE_PROGRAMS      // College and program information
  MESSAGES              // Communication system
  USER_RELATIONSHIPS    // Connections between users
  ANALYTICS             // System-wide analytics and reporting
  SYSTEM_SETTINGS       // Platform configuration and settings
}

model PermissionSet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource  ResourceType
  access    PermissionLevel
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, resource])
  @@map("permission_sets")
}

model ImpersonationSession {
  id              String   @id @default(cuid())
  impersonatorId  String
  impersonator    User     @relation("Impersonator", fields: [impersonatorId], references: [id], onDelete: Cascade)
  targetUserId    String
  targetUser      User     @relation("ImpersonationTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  startedAt       DateTime @default(now())
  endedAt         DateTime?

  @@map("impersonation_sessions")
}

model AuthSession {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String    @unique
  deviceInfo   String?   @map("device_info")
  ipAddress    String?   @map("ip_address")
  lastActivity DateTime  @default(now()) @map("last_activity")
  expiresAt    DateTime  @map("expires_at")
  revokedAt    DateTime? @map("revoked_at")

  @@map("auth_sessions")
}
